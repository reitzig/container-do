name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  prepare:
    runs-on: 'ubuntu-latest'
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        target-os:
          - 'linux'
          - 'darwin'
          - 'windows'
        target-arch:
          - 'amd64'
    env:
      VERSION: "${{needs.prepare.outputs.version}}"
    steps:
      - uses: actions/checkout@v4

      - uses: jdx/mise-action@v2

      - run: |
          version_flag="-X main.Version=${VERSION}"
          os_arch_flag="-X main.OsArch=${GOOS}/${GOARCH}"
          build_flag="-X main.Build=$(date -Iminute)"

          go build -ldflags "-s -w ${version_flag} ${os_arch_flag} ${build_flag}" \
            -o container-do ./...

          archive_name="container-do_${VERSION}_${GOOS}-${GOARCH}"
          if [[ "${GOOS}" == "windows" ]]; then
              zip "${archive_name}.zip" container-do LICENSE README.md
          else
              tar -czf "${archive_name}.tar.gz" container-do LICENSE README.md
          fi
        env:
          GOOS: ${{ matrix.target-os }}
          GOARCH: ${{ matrix.target-arch }}
          CGO_ENABLED: 0

      - uses: actions/upload-artifact@v4
        with:
          name: "build-archives-${{ matrix.target-os }}-${{ matrix.target-arch }}"
          path: 'container-do_*'

  release:
    needs:
      - prepare
      - build
    runs-on: 'ubuntu-latest'
    env:
      VERSION: "${{needs.prepare.outputs.version}}"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          pattern: "build-archives-*"
          merge-multiple: true

      - name: Is pre-release?
        id: is_pre_release
        run: |
          if [[ "${VERSION}" =~ -.*$ ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Release
        uses: docker://antonyurchenko/git-release:v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRAFT_RELEASE: "false"
          PRE_RELEASE: ${{ steps.is_pre_release.outputs.IS_PRERELEASE }}
          CHANGELOG_FILE: "CHANGELOG.md"
          ALLOW_EMPTY_CHANGELOG: "false"
        with:
          args: "container-do_${{needs.prepare.outputs.version}}_*"
